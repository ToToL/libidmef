# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package Idmef;
use base qw(Exporter);
use base qw(DynaLoader);
package Idmefc;
bootstrap Idmef;
package Idmef;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Idmef;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Idmef;


############# Class : Idmef::LibIdmefError ##############

package Idmef::LibIdmefError;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Idmef );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Idmefc::delete_LibIdmefError($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Idmefc::new_LibIdmefError(@_);
    bless $self, $pkg if defined($self);
}

*getCode = *Idmefc::LibIdmefError_getCode;
*what = *Idmefc::LibIdmefError_what;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Idmef::IDMEFCriterion ##############

package Idmef::IDMEFCriterion;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Idmef );
%OWNER = ();
%ITERATORS = ();
*OPERATOR_NOT = *Idmefc::IDMEFCriterion_OPERATOR_NOT;
*OPERATOR_NOCASE = *Idmefc::IDMEFCriterion_OPERATOR_NOCASE;
*OPERATOR_EQUAL = *Idmefc::IDMEFCriterion_OPERATOR_EQUAL;
*OPERATOR_EQUAL_NOCASE = *Idmefc::IDMEFCriterion_OPERATOR_EQUAL_NOCASE;
*OPERATOR_NOT_EQUAL = *Idmefc::IDMEFCriterion_OPERATOR_NOT_EQUAL;
*OPERATOR_NOT_EQUAL_NOCASE = *Idmefc::IDMEFCriterion_OPERATOR_NOT_EQUAL_NOCASE;
*OPERATOR_LESSER = *Idmefc::IDMEFCriterion_OPERATOR_LESSER;
*OPERATOR_LESSER_OR_EQUAL = *Idmefc::IDMEFCriterion_OPERATOR_LESSER_OR_EQUAL;
*OPERATOR_GREATER = *Idmefc::IDMEFCriterion_OPERATOR_GREATER;
*OPERATOR_GREATER_OR_EQUAL = *Idmefc::IDMEFCriterion_OPERATOR_GREATER_OR_EQUAL;
*OPERATOR_SUBSTR = *Idmefc::IDMEFCriterion_OPERATOR_SUBSTR;
*OPERATOR_SUBSTR_NOCASE = *Idmefc::IDMEFCriterion_OPERATOR_SUBSTR_NOCASE;
*OPERATOR_NOT_SUBSTR = *Idmefc::IDMEFCriterion_OPERATOR_NOT_SUBSTR;
*OPERATOR_NOT_SUBSTR_NOCASE = *Idmefc::IDMEFCriterion_OPERATOR_NOT_SUBSTR_NOCASE;
*OPERATOR_REGEX = *Idmefc::IDMEFCriterion_OPERATOR_REGEX;
*OPERATOR_REGEX_NOCASE = *Idmefc::IDMEFCriterion_OPERATOR_REGEX_NOCASE;
*OPERATOR_NOT_REGEX = *Idmefc::IDMEFCriterion_OPERATOR_NOT_REGEX;
*OPERATOR_NOT_REGEX_NOCASE = *Idmefc::IDMEFCriterion_OPERATOR_NOT_REGEX_NOCASE;
*OPERATOR_NULL = *Idmefc::IDMEFCriterion_OPERATOR_NULL;
*OPERATOR_NOT_NULL = *Idmefc::IDMEFCriterion_OPERATOR_NOT_NULL;
sub new {
    my $pkg = shift;
    my $self = Idmefc::new_IDMEFCriterion(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Idmefc::delete_IDMEFCriterion($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Idmef::IDMEFCriteria ##############

package Idmef::IDMEFCriteria;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Idmef );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Idmefc::delete_IDMEFCriteria($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Idmefc::new_IDMEFCriteria(@_);
    bless $self, $pkg if defined($self);
}

*match = *Idmefc::IDMEFCriteria_match;
*clone = *Idmefc::IDMEFCriteria_clone;
*andCriteria = *Idmefc::IDMEFCriteria_andCriteria;
*orCriteria = *Idmefc::IDMEFCriteria_orCriteria;
*toString = *Idmefc::IDMEFCriteria_toString;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Idmef::IDMEFValue ##############

package Idmef::IDMEFValue;
use overload
    "<=" => sub { $_[0]->__le__($_[1])},
    ">=" => sub { $_[0]->__ge__($_[1])},
    "<" => sub { $_[0]->__lt__($_[1])},
    "!=" => sub { $_[0]->__ne__($_[1])},
    "==" => sub { $_[0]->__eq__($_[1])},
    ">" => sub { $_[0]->__gt__($_[1])},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Idmef );
%OWNER = ();
%ITERATORS = ();
*TYPE_UNKNOWN = *Idmefc::IDMEFValue_TYPE_UNKNOWN;
*TYPE_INT8 = *Idmefc::IDMEFValue_TYPE_INT8;
*TYPE_UINT8 = *Idmefc::IDMEFValue_TYPE_UINT8;
*TYPE_INT16 = *Idmefc::IDMEFValue_TYPE_INT16;
*TYPE_UINT16 = *Idmefc::IDMEFValue_TYPE_UINT16;
*TYPE_INT32 = *Idmefc::IDMEFValue_TYPE_INT32;
*TYPE_UINT32 = *Idmefc::IDMEFValue_TYPE_UINT32;
*TYPE_INT64 = *Idmefc::IDMEFValue_TYPE_INT64;
*TYPE_UINT64 = *Idmefc::IDMEFValue_TYPE_UINT64;
*TYPE_FLOAT = *Idmefc::IDMEFValue_TYPE_FLOAT;
*TYPE_DOUBLE = *Idmefc::IDMEFValue_TYPE_DOUBLE;
*TYPE_STRING = *Idmefc::IDMEFValue_TYPE_STRING;
*TYPE_TIME = *Idmefc::IDMEFValue_TYPE_TIME;
*TYPE_DATA = *Idmefc::IDMEFValue_TYPE_DATA;
*TYPE_ENUM = *Idmefc::IDMEFValue_TYPE_ENUM;
*TYPE_LIST = *Idmefc::IDMEFValue_TYPE_LIST;
*TYPE_CLASS = *Idmefc::IDMEFValue_TYPE_CLASS;
*getType = *Idmefc::IDMEFValue_getType;
*isNull = *Idmefc::IDMEFValue_isNull;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Idmefc::delete_IDMEFValue($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Idmefc::new_IDMEFValue(@_);
    bless $self, $pkg if defined($self);
}

*match = *Idmefc::IDMEFValue_match;
*clone = *Idmefc::IDMEFValue_clone;
*toString = *Idmefc::IDMEFValue_toString;
*__le__ = *Idmefc::IDMEFValue___le__;
*__ge__ = *Idmefc::IDMEFValue___ge__;
*__lt__ = *Idmefc::IDMEFValue___lt__;
*__gt__ = *Idmefc::IDMEFValue___gt__;
*__eq__ = *Idmefc::IDMEFValue___eq__;
*__ne__ = *Idmefc::IDMEFValue___ne__;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Idmef::IDMEFPath ##############

package Idmef::IDMEFPath;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Idmef );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Idmefc::new_IDMEFPath(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Idmefc::delete_IDMEFPath($self);
        delete $OWNER{$self};
    }
}

*set = *Idmefc::IDMEFPath_set;
*getClass = *Idmefc::IDMEFPath_getClass;
*getValueType = *Idmefc::IDMEFPath_getValueType;
*setIndex = *Idmefc::IDMEFPath_setIndex;
*undefineIndex = *Idmefc::IDMEFPath_undefineIndex;
*getIndex = *Idmefc::IDMEFPath_getIndex;
*makeChild = *Idmefc::IDMEFPath_makeChild;
*makeParent = *Idmefc::IDMEFPath_makeParent;
*compare = *Idmefc::IDMEFPath_compare;
*clone = *Idmefc::IDMEFPath_clone;
*checkOperator = *Idmefc::IDMEFPath_checkOperator;
*getApplicableOperators = *Idmefc::IDMEFPath_getApplicableOperators;
*getName = *Idmefc::IDMEFPath_getName;
*isAmbiguous = *Idmefc::IDMEFPath_isAmbiguous;
*hasLists = *Idmefc::IDMEFPath_hasLists;
*isList = *Idmefc::IDMEFPath_isList;
*getDepth = *Idmefc::IDMEFPath_getDepth;
*get = *Idmefc::IDMEFPath_get;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Idmef::IDMEFTime ##############

package Idmef::IDMEFTime;
use overload
    "<=" => sub { $_[0]->__le__($_[1])},
    "!=" => sub { $_[0]->__ne__($_[1])},
    ">=" => sub { $_[0]->__ge__($_[1])},
    "<" => sub { $_[0]->__lt__($_[1])},
    "==" => sub { $_[0]->__eq__($_[1])},
    ">" => sub { $_[0]->__gt__($_[1])},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Idmef );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Idmefc::new_IDMEFTime(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Idmefc::delete_IDMEFTime($self);
        delete $OWNER{$self};
    }
}

*set = *Idmefc::IDMEFTime_set;
*setSec = *Idmefc::IDMEFTime_setSec;
*setUSec = *Idmefc::IDMEFTime_setUSec;
*setGmtOffset = *Idmefc::IDMEFTime_setGmtOffset;
*getSec = *Idmefc::IDMEFTime_getSec;
*getUSec = *Idmefc::IDMEFTime_getUSec;
*getGmtOffset = *Idmefc::IDMEFTime_getGmtOffset;
*getTime = *Idmefc::IDMEFTime_getTime;
*clone = *Idmefc::IDMEFTime_clone;
*toString = *Idmefc::IDMEFTime_toString;
*__ne__ = *Idmefc::IDMEFTime___ne__;
*__ge__ = *Idmefc::IDMEFTime___ge__;
*__le__ = *Idmefc::IDMEFTime___le__;
*__eq__ = *Idmefc::IDMEFTime___eq__;
*__gt__ = *Idmefc::IDMEFTime___gt__;
*__lt__ = *Idmefc::IDMEFTime___lt__;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Idmef::IDMEFClass ##############

package Idmef::IDMEFClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Idmef );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Idmefc::new_IDMEFClass(@_);
    bless $self, $pkg if defined($self);
}

*getDepth = *Idmefc::IDMEFClass_getDepth;
*get = *Idmefc::IDMEFClass_get;
*getChildCount = *Idmefc::IDMEFClass_getChildCount;
*isList = *Idmefc::IDMEFClass_isList;
*isKeyedList = *Idmefc::IDMEFClass_isKeyedList;
*getName = *Idmefc::IDMEFClass_getName;
*toString = *Idmefc::IDMEFClass_toString;
*getValueType = *Idmefc::IDMEFClass_getValueType;
*getPath = *Idmefc::IDMEFClass_getPath;
*getEnumValues = *Idmefc::IDMEFClass_getEnumValues;
*getApplicableOperator = *Idmefc::IDMEFClass_getApplicableOperator;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Idmefc::delete_IDMEFClass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Idmef::IDMEF ##############

package Idmef::IDMEF;
use overload
    "==" => sub { $_[0]->__eq__($_[1])},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Idmef );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Idmefc::delete_IDMEF($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Idmefc::new_IDMEF(@_);
    bless $self, $pkg if defined($self);
}

*set = *Idmefc::IDMEF_set;
*clone = *Idmefc::IDMEF_clone;
*getId = *Idmefc::IDMEF_getId;
*toString = *Idmefc::IDMEF_toString;
*toJSON = *Idmefc::IDMEF_toJSON;
*toBinary = *Idmefc::IDMEF_toBinary;
*__eq__ = *Idmefc::IDMEF___eq__;
*get = *Idmefc::IDMEF_get;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Idmef;

1;
